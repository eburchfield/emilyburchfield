library(tidyverse)
library(sf)
library(tmap) # lots to install here, sorry, but it's worth it.
# before installing tmap, do Tools --> Check for package updates and install all updates
library(spData)
data("us_states")
plot(st_geometry(us_states))
data("us_states") # from spData package
ga <- us_states %>% filter(NAME == "Georgia")
roads <- st_read("./data/tl_2016_us_primaryroads.shp")
counties <- st_read("./data/tl_2016_13_cousub.shp")
head(counties)
counties <- st_read("./data/Counties%20Georgia.shp")
proj <- "+proj=lcc +lat_1=31.41666666666667 +lat_2=34.28333333333333 +lat_0=0 +lon_0=-83.5 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs"
roads <- st_transform(roads, proj)
ga <- st_transform(ga, proj)
counties <- st_transform(counties, proj)
plot(st_geometry(ga))
plot(st_geometry(cities), add = T, col = "red")
plot(st_geometry(counties), add = T, col = "red")
plot(st_geometry(ga))
plot(st_geometry(counties), add = T, col = "red")
plot(st_geometry(roads), add = T, col = "blue")
head(counties)
ggplot() +
geom_sf(data = counties, aes(fill = totpop10)) +
geom_sf(data = roads, color = "black") +
labs(title = "All roads lead to the ATL",
fill = "Population") +
theme_minimal()
ggplot() +
geom_sf(data = counties, aes(fill = totpop10)) +
geom_sf(data = roads, color = "black") +
labs(title = "All roads lead to the ATL",
fill = "Population") +
theme_minimal()
proj <- "+proj=lcc +lat_1=31.41666666666667 +lat_2=34.28333333333333 +lat_0=0 +lon_0=-83.5 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +to_meter=0.3048006096012192 +no_defs"
roads <- st_transform(roads, proj)
ga <- st_transform(ga, proj)
counties <- st_transform(counties, proj)
roads <- st_crop(roads, ga)
plot(st_geometry(ga))
plot(st_geometry(counties), add = T, col = "red")
plot(st_geometry(roads), add = T, col = "blue")
ggplot(ga) +
geom_sf(fill = "beige") +
labs(title = "The fine state of Georgia") +
theme_minimal()
ggplot() +
geom_sf(data = counties, aes(fill = totpop10)) +
geom_sf(data = roads, color = "black") +
labs(title = "All roads lead to the ATL",
fill = "Population") +
theme_minimal()
ggplot() +
geom_sf(data = counties, aes(fill = totpop10)) +
geom_sf(data = roads, color = "yellow") +
labs(title = "All roads lead to the ATL",
fill = "Population") +
theme_minimal()
ggplot() +
geom_sf(data = counties, aes(fill = totpop10)) +
geom_sf(data = roads, color = "orange") +
labs(title = "All roads lead to the ATL",
fill = "Population") +
theme_minimal()
ggplot() +
geom_sf(data = counties, aes(fill = totpop10)) +
geom_sf(data = roads, color = "orange") +
labs(title = "All roads lead to the ATL",
fill = "Population (x100)") +
theme_minimal()
library(ggspatial)
ggplot() +
geom_sf(data = counties, aes(fill = POP2010)) +
geom_sf(data = roads, color = "black") +
labs(title = "All roads lead to the ATL",
fill = "Population") +
theme_minimal() +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering())
library(ggspatial)
ggplot() +
geom_sf(data = counties, aes(fill = totpop10)) +
geom_sf(data = roads, color = "orange") +
labs(title = "All roads lead to the ATL",
fill = "Population (x100)") +
theme_minimal() +
annotation_scale(location = "bl", width_hint = 0.5) +
annotation_north_arrow(location = "tr", which_north = "true",
style = north_arrow_fancy_orienteering())
library(tmap)
tmap_mode("plot") # set to "view" for interactive visualizations, see below
qtm(roads)
class(countes)
class(counties)
glimpse(counties)
qtm(counties, fill = "totpop10", fill.title = "Population of Cities in GA")
qtm(counties, fill = "totpop10", fill.title = "County population in GA")
qtm(counties, fill = "totpop10", fill.title = "Total population")
tm_shape(counties) +
tm_fill()
tm_shape(cities) +
tm_fill(col = "totpop2010", title = "Population") +
tm_compass() +
tm_scale_bar()
tm_shape(cities) +
tm_fill(col = "totpop10", title = "Population") +
tm_compass() +
tm_scale_bar()
tm_shape(countie) +
tm_fill(col = "totpop10", title = "Population") +
tm_compass() +
tm_scale_bar()
tm_shape(counties) +
tm_fill(col = "totpop10", title = "Population") +
tm_compass() +
tm_scale_bar()
tm_shape(cities) +
tm_fill(col = "totpop10", convert2density = T, style = "jenks", title = "Population") +
tm_compass() +
tm_scale_bar()
tm_shape(counties) +
tm_fill(col = "totpop10", convert2density = T, style = "jenks", title = "Population") +
tm_compass() +
tm_scale_bar()
tm_shape(counties) +
tm_fill(col = "totpop10", convert2density = T, style = "jenks", title = "Population (x100)") +
tm_borders(alpha = 0.3) +
tm_compass() +
tm_scale_bar()
tm <- tm_shape(counties) +
tm_fill(col = "totpop10", convert2density = T, style = "jenks", title = "Population (x100)") +
tm_borders(alpha = 0.3) +
tm_compass() +
tm_scale_bar() +
tm_shape(roads) +
tm_lines(col = "brown", alpha = 0.4)
tm
library(tidyverse)
library(sf)
library(tmap) # lots to install here, sorry, but it's worth it.
# before installing tmap, do Tools --> Check for package updates and install all updates
library(spData)
data("us_states") # from spData package
ga <- us_states %>% filter(NAME == "Georgia")
roads <- st_read("./data/tl_2016_us_primaryroads.shp")
counties <- st_read("./data/Counties%20Georgia.shp")
counties
st_is_valid(counties)
tm <- tm_shape(counties) +
tm_fill(col = "totpop10", convert2density = T, style = "jenks", title = "Population (x100)") +
tm_borders(alpha = 0.3) +
tm_compass() +
tm_scale_bar() +
tm_shape(roads) +
tm_lines(col = "black", alpha = 0.4)
tm
?last_map
??last_map
fl <- list("./fig/shannon_diversity.png",
"./fig/simpson_diversity.png",
"./fig/shannon_evenness.png",
"./fig/simpson_evenness.png",
"./fig/richness.png",
"./fig/pnc.png")
rl <- lapply(fl, png::readPNG)
gl <- lapply(rl, grid::rasterGrob)
gridExtra::grid.arrange(grops=gl)
gl
gridExtra::grid.arrange(grobs=gl, ncol=2)
gb <- gridExtra::grid.arrange(grobs=gl, ncol=3)
gb
plot(gb)
gb <- gridExtra::grid.arrange(grobs=gl, ncol=2)
plot(gb)
shdi <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "Shannon Diversity Index")
library(sp)
shdi <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "Shannon Diversity Index")
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_SHDI_ALL, na.rm=T))
source("LI_load.R")
library(stargazer)
library(tidyverse)
library(RColorBrewer)
my.palette <- brewer.pal(n=9, "BuGn")
state_layer <- list("sp.polygons", states_sp, col = "gray", first=F)
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_SHDI_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
png(filename="./fig/shannon_diversity.png", width = 7, height = 5, units = "in", res = 300)
shdi <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "Shannon Diversity Index")
plot(shdi)
dev.off()
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_SIDI_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
png(filename="./fig/simpson_diversity.png", width = 7, height = 5, units = "in", res = 300)
sidi <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "Simpson Diversity Index")
source("LI_load.R")
library(stargazer)
library(tidyverse)
library(RColorBrewer)
my.palette <- brewer.pal(n=9, "BuGn")
state_layer <- list("sp.polygons", states_sp, col = "gray", first=F)
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_SHDI_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
png(filename="./fig/shannon_diversity.png", width = 7, height = 5, units = "in", res = 300)
shdi <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "Shannon Diversity Index")
plot(shdi)
dev.off()
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_SIDI_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
png(filename="./fig/simpson_diversity.png", width = 7, height = 5, units = "in", res = 300)
sidi <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "Simpson Diversity Index")
plot(sidi)
dev.off()
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_RICH_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
png(filename="./fig/richness.png", width = 7, height = 5, units = "in", res = 300)
rich <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "Richness")
plot(rich)
dev.off()
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_SHEI_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
png(filename="./fig/shannon_evenness.png", width = 7, height = 5, units = "in", res = 300)
shei <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "Shannon Evenness Index")
plot(shei)
dev.off()
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_SIEI_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
png(filename="./fig/simpson_evenness.png", width = 7, height = 5, units = "in", res = 300)
siei <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "Simpson Evenness Index")
plot(siei)
dev.off()
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(PNC, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
png(filename="./fig/pnc.png", width = 7, height = 5, units = "in", res = 300)
pnc <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "Percent Natural Cover")
plot(pnc)
dev.off()
grid.arrange(shdi, sidi,
shei, siei,
rich, pnc)
library(gridExtra)
grid.arrange(shdi, sidi,
shei, siei,
rich, pnc)
?grid.arrange
grid.arrange(shdi, sidi,
shei, siei,
rich, pnc,
ncol = 2,
widths = 1:2,
heights=1:2)
grid.arrange(shdi, sidi,
shei, siei,
rich, pnc,
ncol = 2,
widths = 2,
heights=2)
grid.arrange(shdi, sidi,
shei, siei,
rich, pnc,
ncol = 2,
widths = rep(2,6),
heights=rep(2,6))
grid.arrange(shdi, sidi,
shei, siei,
rich, pnc,
ncol = 2,
widths = rep(2,2),
heights=rep(2,2))
grid.arrange(shdi, sidi,
shei, siei,
rich, pnc,
ncol = 3)
plt <- grid.arrange(shdi, sidi,
shei, siei,
rich, pnc,
ncol = 2)
png(filename="./fig/compositional.png", width = 12, height = 10, units = "in", res = 300)
plot(plt)
dev.off()
png(filename="./fig/compositional.png", width = 12, height = 10, units = "in", res = 300, bg = "white")
plot(plt)
dev.off()
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_AREA_MN_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
png(filename="./fig/mean_patch_area.png", width = 7, height = 5, units = "in", res = 300)
mpa <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "Mean Patch Area")
plot(mpa)
dev.off()
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_LPI_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
png(filename="./fig/lpi.png", width = 7, height = 5, units = "in", res = 300)
lpi <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "Largest Patch Index")
plot(lpi)
dev.off()
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_CONTAG_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
png(filename="./fig/contag.png", width = 7, height = 5, units = "in", res = 300)
cont <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "Contagion")
plot(cont)
dev.off()
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_ED_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
png(filename="./fig/ed.png", width = 7, height = 5, units = "in", res = 300)
ed <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "Edge Density")
plot(ed)
dev.off()
plt2 <- grid.arrange(mpa, lpi,
cont, ed,
ncol = 2)
png(filename="./fig/configurational.png", width = 12, height = 10, units = "in", res = 300, bg = "transparent")
plot(plt2)
dev.off()
plt2 <- grid.arrange(mpa, lpi,
cont, ed,
ncol = 2)
png(filename="./fig/configurational.png", width = 12, height = 10, units = "in", res = 300, bg = "transparent")
print(plt2)
dev.off()
plt2 <- grid.arrange(mpa, lpi,
cont, ed,
ncol = 2)
png(filename="./fig/configurational.png", width = 12, height = 10, units = "in", res = 300, bg = "transparent")
plt2
dev.off()
png(filename="./fig/configurational.png", width = 12, height = 10, units = "in", res = 300, bg = "transparent")
plot(plt2)
dev.off()
plt2 <- arrangeGrob(mpa, lpi,
cont, ed,
ncol = 2)
png(filename="./fig/configurational.png", width = 12, height = 10, units = "in", res = 300, bg = "white")
plot(plt2)
dev.off()
plot(plt2)
install.packages("cowplot")
library(cowplot)
png(filename="./fig/configurational.png", width = 12, height = 10, units = "in", res = 300)
cowplot::ggdraw(plt2) +
theme(plot.background = element_rect(fill = "white", color = NA))
dev.off()
png(filename="./fig/compositional.png", width = 12, height = 10, units = "in", res = 300, bg = "white")
cowplot::ggdraw(plt) +
theme(plot.background = element_rect(fill = "white", color = NA))
dev.off()
cs <- cp %>% select(YIELD, ACRES_PLANTED, TOTAL_ACRES, ACRES, PERC_IRR, GDD, SDD,
TP, EfP, ExP, SOIL)
ss <- sp %>% select(YIELD, ACRES_PLANTED, TOTAL_ACRES, ACRES, PERC_IRR, GDD, SDD,
TP, EfP, ExP, SOIL)
ws <- wp %>% select(YIELD, ACRES_PLANTED, TOTAL_ACRES, ACRES, PERC_IRR, GDD, SDD,
TP, EfP, ExP, SOIL)
df <- cp
crop <- "Corn"
grp <- df %>% group_by(GEOID) %>% summarize(mn = mean(YIELD, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
c <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = paste0(crop, " yield (bu/ac)"))
df <- sp
crop <- "Soy"
grp <- df %>% group_by(GEOID) %>% summarize(mn = mean(YIELD, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
s <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = paste0(crop, " yield (bu/ac)"))
df <- wp
crop <- "Wheat"
grp <- df %>% group_by(GEOID) %>% summarize(mn = mean(YIELD, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
w <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = paste0(crop, " yield (bu/ac)"))
plt3 <- grid.arrange(c, s, w,
ncol = 1)
png(filename="./fig/yield.png", width = 5, height = 12, units = "in", res = 300, bg = "transparent")
cowplot::ggdraw(plt3) +
theme(plot.background = element_rect(fill = "white", color = NA))
dev.off()
plt3 <- grid.arrange(c, s, w,
ncol = 3)
png(filename="./fig/comp_config_paper.png", width = 5, height = 8, units = "in", res = 300, bg = "transparent")
cowplot::ggdraw(plt3) +
theme(plot.background = element_rect(fill = "white", color = NA))
dev.off()
plt2 <- arrangeGrob(mpa, lpi,
cont, ed,
ncol = 2)
png(filename="./fig/configurational.png", width = 12, height = 7, units = "in", res = 300)
cowplot::ggdraw(plt2) +
theme(plot.background = element_rect(fill = "white", color = NA))
dev.off()
plt2 <- arrangeGrob(mpa, lpi,
cont, ed,
ncol = 2)
png(filename="./fig/configurational.png", width = 10, height = 7, units = "in", res = 300)
cowplot::ggdraw(plt2) +
theme(plot.background = element_rect(fill = "white", color = NA))
dev.off()
plt3 <- grid.arrange(c, s, w,
ncol = 1)
png(filename="./fig/yield.png", width = 5, height = 7, units = "in", res = 300, bg = "transparent")
cowplot::ggdraw(plt3) +
theme(plot.background = element_rect(fill = "white", color = NA))
dev.off()
plt4 <- grid.arrange(sdi, ed)
plt4 <- grid.arrange(shdi, ed)
png(filename="./fig/comp_config_paper.png", width = 8, height = 5, units = "in", res = 300, bg = "transparent")
cowplot::ggdraw(plt4) +
theme(plot.background = element_rect(fill = "white", color = NA))
dev.off()
plt4 <- grid.arrange(shdi, ed,
ncol = 2)
png(filename="./fig/comp_config_paper.png", width = 8, height = 5, units = "in", res = 300, bg = "transparent")
cowplot::ggdraw(plt4) +
theme(plot.background = element_rect(fill = "white", color = NA))
dev.off()
plt4 <- grid.arrange(shdi, ed,
ncol = 2)
png(filename="./fig/comp_config_paper.png", width = 8, height = 7, units = "in", res = 300, bg = "transparent")
cowplot::ggdraw(plt4) +
theme(plot.background = element_rect(fill = "white", color = NA))
dev.off()
plt4 <- grid.arrange(shdi, ed,
ncol = 2)
png(filename="./fig/comp_config_paper.png", width = 7, height = 8, units = "in", res = 300, bg = "transparent")
cowplot::ggdraw(plt4) +
theme(plot.background = element_rect(fill = "white", color = NA))
dev.off()
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_SHDI_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
shdi2 <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "(a) Shannon Diversity Index")
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_ED_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
ed2 <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "(b) Edge Density")
plt4 <- grid.arrange(shdi2, ed2,
ncol = 2)
png(filename="./fig/comp_config_paper.png", width = 7, height = 8, units = "in", res = 300, bg = "transparent")
cowplot::ggdraw(plt4) +
theme(plot.background = element_rect(fill = "white", color = NA))
dev.off()
plt4 <- grid.arrange(shdi2, ed2,
ncol = 2)
png(filename="./fig/comp_config_paper.png", width = 10, height = 9, units = "in", res = 300, bg = "transparent")
cowplot::ggdraw(plt4) +
theme(plot.background = element_rect(fill = "white", color = NA))
dev.off()
shdi2 <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "(a) Compositional Complexity /n Shannon Diversity Index")
shdi2
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_SHDI_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
shdi2 <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "(a) Compositional Complexity \n Shannon Diversity Index")
shdi2
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_SHDI_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
shdi2 <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "(a) Compositional Complexity: \n Shannon Diversity Index")
grp <- cp %>% group_by(GEOID) %>% summarize(mn = mean(LSM_ED_ALL, na.rm=T))
cty_plot <- merge(counties_sp, grp, by = "GEOID")
ed2 <- spplot(cty_plot, "mn", col.regions = my.palette, cuts = 8, sp.layout = state_layer, col = "transparent", main = "(b) Configurational Complexity: \n Edge Density")
plt4 <- grid.arrange(shdi2, ed2,
ncol = 2)
png(filename="./fig/comp_config_paper.png", width = 10, height = 10, units = "in", res = 300, bg = "transparent")
cowplot::ggdraw(plt4) +
theme(plot.background = element_rect(fill = "white", color = NA))
dev.off()
install.packages("gapminder") # installs the gapminder package
library(gapminder) # this loads the gapminder package into your R session
data(gapminder) # this pulls data from the gapminder package into your Global Environment
install.packages("gapminder") # installs the gapminder package
library(gapminder) # this loads the gapminder package into your R session
data(gapminder) # this pulls data from the gapminder package into your Global Environment
install.packages("gapminder")
install.packages("gapminder") # installs the gapminder package
install.packages("gapminder")
glimpse(gapminder)
data(gapmidner)
head(gapminder)
head(gapminder)
unique(gapminder$year)
length(unique(gapminder$country))
max(gapminder$pop)
gapminder[gapminder$pop == max(gapminder$pop),]
range(gapminder$lifeExp[gapminder$year == 2007])
rg <- range(gapminder$lifeExp[gapminder$year == 2007])
# first subset for 2007
gm07 <- gapminder[gapminder$year == 2007,]
# then find the max lifeExp country
gm07[gm07 == max(lifeExp),]
# then find the max lifeExp country
gm07[gm07 == max(gm07$lifeExp),]
# then find the max lifeExp country
gm07[gm07 == max(gm07$lifeExp)]
gm07
# then find the max lifeExp country
gm07$country[gm07 == max(gm07$lifeExp)]
# then find the max lifeExp country
gm07$country[gm07$lifeExp == max(gm07$lifeExp)]
gapminder %>% filter(year == 2007) %>% arrange(desc(year))
gapminder %>% filter(year == 2007) %>% arrange(desc(lifeExp))
library(tidyverse)
gapminder %>% filter(year == 2007) %>% arrange(desc(lifeExp))
gapminder %>% filter(year == 2007) %>% arrange(lifeExp)
rg <- range(gapminder$lifeExp[gapminder$year == 2007])
# first subset for 2007
gm07 <- gapminder[gapminder$year == 2007,]
# then find the max lifeExp country
gm07$country[gm07$lifeExp == max(gm07$lifeExp)]
# this feel inefficient?  good.  we'll learn how to do this better next week.
rg <- range(gapminder$lifeExp[gapminder$year == 2007])
gm07 <- gapminder[gapminder$year == 2007,]
gm07$country[gm07$lifeExp == min(gm07$lifeExp)]
head(gapminder)
library(blogdown)
blogdown::hugo_version()
serve_site()
setwd("C:/Users/eburchf/website/hugo_site/content/courses")
serve_site()
